start: statement+

?statement: exp ";;" -> statement
         | app_exp   -> statement

?app_exp: exp (exp)*  -> make_app

?exp: exp1

?exp1: exp2 "+" exp1          -> plus
      | exp2 "-" exp1         -> minus
      | exp2

?exp2: exp3 "*" exp2          -> mul
      | exp3 "/" exp2         -> div
      | exp3

?exp3: exp4 "<=" exp3         -> leq
      | exp4 "==" exp3        -> eq
      | exp4

?exp4: "if" exp "then" exp "else" exp -> if_
      | exp5

?exp5: "-" exp5               -> neg
      | exp6

?exp6: "\\" NAME "." exp      -> lam
      | exp7

?exp7: exp7 exp8              -> app
      | exp8

?exp8: "hd" exp8              -> hd
      | "tl" exp8             -> tl
      | exp9 ":" exp8         -> cons
      | "#"                   -> nil
      | exp9

?exp9: NAME                   -> var
      | NUMBER                -> number
      | "(" exp ")"
      | "let" NAME "=" exp "in" exp    -> let
      | "letrec" NAME "=" exp "in" exp -> rec
      | "fix" exp                      -> fix

NAME: /[a-z_][a-zA-Z0-9_]*/
NUMBER: /\d+(\.\d+)?/    
%import common.WS
%ignore WS

%ignore /\/\/[^\n]*/  
%ignore /\/\*[\s\S]*?\*\//  